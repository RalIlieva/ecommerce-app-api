services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - dev-static-data:/vol/web
      - dev-logs:/var/log/django
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DJANGO_ENV=development
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - celery

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.6
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
    command: celery -A app worker -l info
    volumes:
      - ./app:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env

  celery-beat:
    build:
      context: .
    command: sh -c "/usr/local/bin/wait-for-it.sh db:5432 -- celery -A app beat --loglevel=info"
    volumes:
      - ./app:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # For development
#      dockerfile: Dockerfile  # For production
    container_name: frontend
    ports:
      - "3000:5173"  # Host port 3000 maps to container port 5173
#      - "3000:3000"  # React dev server runs on port 3000
#      - "3000:80"  # Host port 3000 mapped to container port 80 (Nginx)
    environment:
      - VITE_API_URL=http://app:8000/api
    env_file:
        - ./frontend/.env
    volumes:
      - ./frontend:/app  # Mount local frontend directory to /app in container
      - /app/node_modules  # Use an anonymous volume to prevent local node_modules from overwriting container's
    depends_on:
      - app
    networks:
      - app-network

volumes:
  dev-db-data:
  dev-static-data:
  dev-logs:

networks:
  app-network:
    driver: bridge
