# """
# Django settings for app project.
# Generated by 'django-admin startproject' using Django 5.0.7.
# """
#
# import sys
# import os
# from pathlib import Path
# from datetime import timedelta
#
# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
#
#
# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
#
# SECRET_KEY = os.getenv('SECRET_KEY')
#
# if not SECRET_KEY:
#     raise ValueError("SECRET_KEY not found in environment variables.")
#
# # SECURITY WARNING: No Debug True in production!
# DEBUG = True
#
# ALLOWED_HOSTS = []
#
#
# # Application definition
#
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'core',
#     'users.apps.UsersConfig',
#     'administrators.apps.AdministratorsConfig',
#     'products',
#     'order',
#     'payment',
#     'cart',
#     'checkout',
#     'wishlist',
#     'notifications',
#     'vendor',
#     'rest_framework',
#     'drf_spectacular',
#     'rest_framework_simplejwt',
#     'phonenumber_field',
#     'django_filters',
#     'djoser',
# ]
#
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
#
# ROOT_URLCONF = 'app.urls'
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         # 'DIRS': [os.path.join(BASE_DIR, 'templates')],
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
#
# WSGI_APPLICATION = 'app.wsgi.application'
#
#
# # Database
# # https://docs.djangoproject.com/en/5.0/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': os.environ.get('DB_HOST'),
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASS'),
#         # Keep connections open for 600 seconds
#         'CONN_MAX_AGE': 600 if 'test' not in sys.argv else 0,
#     }
# }
#
# # Password validation
# # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
#
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]
#
#
# # Internationalization
# # https://docs.djangoproject.com/en/5.0/topics/i18n/
#
# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'
#
# USE_I18N = True
#
# USE_TZ = True
#
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.0/howto/static-files/
#
# STATIC_URL = '/static/static/'
# MEDIA_ULR = '/static/media/'
#
# MEDIA_ROOT = '/vol/web/media'
# STATIC_ROOT = '/vol/web/static'
#
# # Default primary key field type
# # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
#
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#
# AUTH_USER_MODEL = 'users.User'
#
# REST_FRAMEWORK = {
#     'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
#
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#         'rest_framework.authentication.SessionAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticatedOrReadOnly',
#     ),
#     'DEFAULT_PARSER_CLASSES': (
#         'rest_framework.parsers.JSONParser',
#         'rest_framework.parsers.FormParser',
#         'rest_framework.parsers.MultiPartParser',
#     ),
#     'DEFAULT_RENDERER_CLASSES': (
#         'rest_framework.renderers.JSONRenderer',
#         'rest_framework.renderers.BrowsableAPIRenderer',
#         'rest_framework.renderers.TemplateHTMLRenderer',
#     ),
#     'DEFAULT_FILTER_BACKENDS': [
#         'django_filters.rest_framework.DjangoFilterBackend'
#     ],
#     'DEFAULT_PAGINATION_CLASS': 'products.pagination.CustomPagination',
#     'PAGE_SIZE': 10,
#     'EXCEPTION_HANDLER': 'core.handlers.drf_default_with_modifications_exception_handler',
#     # Versioning settings
#     'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
#     'DEFAULT_VERSION': 'v1',
#     'ALLOWED_VERSIONS': ['v1'],
# }
#
# SPECTACULAR_SETTINGS = {
#     # API version displayed in Swagger UI
#     'VERSION': '1.0.0',
#     'SERVE_INCLUDE_SCHEMA': False,
# }
#
# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     'AUTH_HEADER_TYPES': ('Bearer',),
#     'TOKEN_OBTAIN_SERIALIZER': 'users.serializers.MyTokenObtainPairSerializer',
# }
#
# DJOSER = {
#     'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
#     'USERNAME_RESET_CONFIRM_URL': 'username/reset/confirm/{uid}/{token}',
#     'ACTIVATION_URL': 'activate/{uid}/{token}',
#     'SEND_ACTIVATION_EMAIL': False,
#     'SEND_CONFIRMATION_EMAIL': False,
#     'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
#     'LOGOUT_ON_PASSWORD_CHANGE': True,
#     'HIDE_USERS': True,
#     'SERIALIZERS': {},
#     'EMAIL': {
#         'password_reset': 'djoser.email.PasswordResetEmail',
#         # 'activation': 'djoser.email.ActivationEmail',
#     }
#     # 'PERMISSIONS': {
#     #     'user_create': ['rest_framework.permissions.AllowAny'],
#     #     'user_delete': ['rest_framework.permissions.IsAdminUser'],
#     #     'user': ['rest_framework.permissions.IsAuthenticated'],
#     # },
# }
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',  # Sends emails to admins for errors
#         },
#         'file': {
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': '/var/log/django/django.log',  # Path to the log file inside the Docker container
#             'maxBytes': 10240,  # Max log file size in bytes (10MB)
#             'backupCount': 5,  # Number of backup logs to keep
#             'formatter': 'verbose',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG' if DEBUG else 'ERROR',  # In production, log errors and higher
#     },
#     'loggers': {
#         'django': {  # Django's internal logs
#             'handlers': ['console', 'mail_admins', 'file'] if not DEBUG else ['console'],
#             'level': 'DEBUG' if DEBUG else 'ERROR',
#             'propagate': True,
#         },
#         'products': {  # Example: Products app's logger
#             'handlers': ['console', 'file'] if not DEBUG else ['console'],
#             'level': 'DEBUG' if DEBUG else 'ERROR',
#             'propagate': False,
#         },
#         # TO DO - define other loggers as needed
#     },
# }
#
# # Stripe Settings
# STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
# STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
# STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')
#
# # Session Configuration
# SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
#
# # Celery Configuration Settings
# CELERY_BROKER_URL = 'redis://redis:6379/0'
# CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'
#
#
# # Email settings for sending error notifications to
# # List of admin emails
# ADMINS = [(os.getenv('ADMIN_NAME'), os.getenv('ADMIN_EMAIL'))]
#
# # Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')
# # Test email for the vendor
# VENDOR_EMAIL = 'vendor@example.com'
